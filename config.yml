general:
  logInfoUi:
    prefix: '[Info] '
    suffix: ''
    style:
      fg: green
  logWarningUi:
    prefix: '[Warning] '
    suffix: ''
    style:
      fg: yellow
  logErrorUi:
    prefix: '[Error] '
    suffix: ''
    style:
      fg: red
  explorerTable:
    defaultUi:
      prefix: '  '
      suffix: ''
      fileStyle:
        fg: white
      directoryStyle:
        fg: cyan
    focusUi:
      prefix: '▸['
      suffix: ']'
      style:
        fg: blue
        decorations:
          - bold
    selectionUi:
      prefix: ' {'
      suffix: '}'
      style:
        fg: green
    focusSelectionUi:
      prefix: '▸['
      suffix: ']'
      style:
        fg: blue
        decorations:
          - bold
    indexHeader:
      name: index
      percentage: 10
      style: null
    nameHeader:
      name: ┌──── name
      percentage: 65
      style: null
    permissionsHeader:
      name: permissions
      percentage: 15
      style: null
    sizeHeader:
      name: size
      percentage: 10
      style: null
    firstEntryPrefix: ├─
    entryPrefix: ├─
    lastEntryPrefix: └─
  sorting:
    sortType: dirFirst
    reverse: false
    ignoreCase: true
    ignoreDiacritics: true
  showHidden: false
modes:
  customs:
    go-to:
      keyBindings:
        onKeys:
          '~':
            help: Home
            messages:
              - name: ChangeDirectory
                args:
                  - /Users/dinhhuy258
              - name: PopMode
                args: []
          D:
            help: Documents
            messages:
              - name: ChangeDirectory
                args:
                  - /Users/dinhhuy258/Documents
              - name: PopMode
                args: []
          d:
            help: Downloads
            messages:
              - name: ChangeDirectory
                args:
                  - /Users/dinhhuy258/Downloads
              - name: PopMode
                args: []
          g:
            help: focus first
            messages:
              - name: FocusFirst
                args: []
              - name: PopMode
                args: []
          h:
            help: Desktop
            messages:
              - name: ChangeDirectory
                args:
                  - /Users/dinhhuy258/Desktop
              - name: PopMode
                args: []
          ctrl+c:
            help: quit
            messages:
              - name: Quit
                args: []
          w:
            help: Workspace
            messages:
              - name: ChangeDirectory
                args:
                  - /Users/dinhhuy258/Workspace
              - name: PopMode
                args: []
        default:
          help: cancel
          messages:
            - name: PopMode
              args: []
    yarn:
      keyBindings:
        onKeys:
          p:
            help: yarn path
            messages:
              - name: BashExecSilently
                args:
                  - |
                    focus_path="${FM_FOCUS_PATH}"
                    if [ "${focus_path}" ]; then
                      echo -n ${focus_path} | pbcopy -selection clipboard
                      echo LogSuccess "'"${focus_path} was coppied to clipboard"'" >> "${FM_PIPE_MSG_IN:?}"
                    fi

                    echo PopMode >> "${FM_PIPE_MSG_IN:?}"
          'n':
            help: yarn name
            messages:
              - name: BashExecSilently
                args:
                  - |
                    focus_path="${FM_FOCUS_PATH}"
                    if [ "${focus_path}" ]; then
                      echo -n $(basename ${focus_path}) | pbcopy -selection clipboard
                      echo LogSuccess "'"$(basename "${focus_path}") was coppied to clipboard"'" >> "${FM_PIPE_MSG_IN:?}"
                    fi

                    echo PopMode >> "${FM_PIPE_MSG_IN:?}"
          d:
            help: yarn directory
            messages:
              - name: BashExecSilently
                args:
                  - |
                    focus_path="${FM_FOCUS_PATH}"
                    if [ "${focus_path}" ]; then
                      echo -n $(dirname ${focus_path}) | pbcopy -selection clipboard
                      echo LogSuccess "'"$(dirname "${focus_path}") was coppied to clipboard"'" >> "${FM_PIPE_MSG_IN:?}"
                    fi

                    echo PopMode >> "${FM_PIPE_MSG_IN:?}"
        default:
          help: cancel
          messages:
            - name: PopMode
              args: []
    mark-load:
      keyBindings:
        onKeys:
          ctrl+c:
            help: quit
            messages:
              - name: Quit
          esc:
            help: cancel
            messages:
              - name: PopMode
        default:
          help: cancel
          messages:
            - name: SetInputBuffer
              args:
                - ''
            - name: UpdateInputBufferFromKey
            - name: BashExecSilently
              args:
                - |
                  session_path="${FM_SESSION_PATH:?}"
                  mark_file="${session_path}/mark"

                  # create a mark file if not exists
                  touch ${mark_file}

                  pressed_key="${FM_INPUT_BUFFER}"

                  # go through the mark file and read the value to variable marks
                  (while IFS= read -r line; do
                  key=$(echo ${line:?} | cut -d ";" -f 1)
                  path=$(echo ${line:?} | cut -d ";" -f 2)

                  if [ "${key}" = "${pressed_key}" ]; then
                    echo FocusPath "'""${path}""'" >> "${FM_PIPE_MSG_IN:?}"
                    break
                  fi
                  done < "${mark_file:?}")

                  echo PopMode >> "${FM_PIPE_MSG_IN:?}"
    mark-save:
      keyBindings:
        onKeys:
          ctrl+c:
            help: quit
            messages:
              - name: Quit
          esc:
            help: cancel
            messages:
              - name: PopMode
        default:
          help: cancel
          messages:
            - name: SetInputBuffer
              args:
                - ''
            - name: UpdateInputBufferFromKey
            - name: BashExecSilently
              args:
                - |
                  session_path="${FM_SESSION_PATH:?}"
                  mark_file="${session_path}/mark"

                  focus_path="${FM_FOCUS_PATH:?}"
                  key="${FM_INPUT_BUFFER:?}"

                  # create a mark file if not exists
                  touch ${mark_file}
                  # remove conflict mark key in the mark file
                  marks=$(sed "/^"${key}";/d" < "${mark_file:?}")
                  printf "%s\n" "${marks[@]}" > ${mark_file}
                  # add new mark key to the mark file
                  echo "${key};${focus_path}" >> ${mark_file}

                  echo PopMode >> "${FM_PIPE_MSG_IN:?}"
    open:
      keyBindings:
        onKeys:
          f:
            help: open in Finder
            messages:
              - name: BashExecSilently
                args:
                  - |
                    focus_path="${FM_FOCUS_PATH}"
                    if [ "${focus_path}" ]; then
                      open -R "${focus_path}"
                    fi

                    echo PopMode >> "${FM_PIPE_MSG_IN:?}"
          c:
            help: open in Visual Studio Code
            messages:
              - name: BashExecSilently
                args:
                  - |
                    focus_path="${FM_FOCUS_PATH}"
                    if [ "${focus_path}" ]; then
                      open -a "Visual Studio Code" "${focus_path}"
                    fi

                    echo PopMode >> "${FM_PIPE_MSG_IN:?}"
          v:
            help: open in NeoVim
            messages:
              - name: BashExec
                args:
                  - |
                    focus_path="${FM_FOCUS_PATH}"
                    if [ "${focus_path}" ]; then
                      nvim "${focus_path}"
                    fi

                    echo PopMode >> "${FM_PIPE_MSG_IN:?}"
          t:
            help: open new window in tmux
            messages:
              - name: BashExec
                args:
                  - |
                    focus_path="${FM_FOCUS_PATH}"
                    if [ "${focus_path}" ]; then
                      if [ -f "${focus_path}" ]; then
                        tmux new-window -c "$(dirname ${focus_path})"
                      else
                        tmux new-window -c "${focus_path}"
                      fi
                    fi

                    echo PopMode >> "${FM_PIPE_MSG_IN:?}"
          o:
            help: open
            messages:
              - name: BashExec
                args:
                  - |
                    focus_path="${FM_FOCUS_PATH}"
                    if [ "${focus_path}" ]; then
                      case $(file --mime-type ${focus_path} -b) in
                          text/*) nvim ${focus_path};;
                          application/json) nvim ${focus_path};;
                          *) open "${focus_path}"
                      esac
                    fi

                    echo PopMode >> "${FM_PIPE_MSG_IN:?}"
        default:
          help: cancel
          messages:
            - name: PopMode
              args: []
  builtins:
    default:
      keyBindings:
        onKeys:
          G:
            help: focus last
            messages:
              - name: FocusLast
          g:
            help: go to
            messages:
              - name: SwitchMode
                args:
                  - go-to
          o:
            help: open
            messages:
              - name: SwitchMode
                args:
                  - open
          'y':
            help: yarn
            messages:
              - name: SwitchMode
                args:
                  - yarn
          /:
            help: search
            messages:
              - name: BashExec
                args:
                  - |
                    file_path=$(ls -a | fzf --no-sort)
                    if [ "${file_path}" ]; then
                      echo FocusPath "'"$PWD/${file_path}"'" >> "${FM_PIPE_MSG_IN:?}"
                    fi
          m:
            help: mark save
            messages:
              - name: SwitchMode
                args:
                  - mark-save
          '`':
            help: mark load
            messages:
              - name: SwitchMode
                args:
                  - mark-load
